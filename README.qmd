---
title: Boundaries
format: gfm
---

```{r include=FALSE}
library(tidyverse)
library(tmap)
library(sf)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Turn off s2: 
sf::sf_use_s2(FALSE)
```

This document provides reproducible code that generates boundary datasets and lookup tables used by Active Travel England.
See `README.qmd` for reproducible source code.

## Local authority districts

Local authority districts are provided by https://geoportal.statistics.gov.uk/.
They are not static.
The latest version is [Local_Authority_Districts_May_2023_UK_BUC](https://geoportal.statistics.gov.uk/datasets/ons::local-authority-districts-may-2023-uk-buc-2/explore?location=54.540872%2C-3.405121%2C6.98).

```{r lads}
layer = "Local_Authority_Districts_December_2022_Boundaries_UK_BUC"
layer = "Local_Authority_Districts_May_2023_UK_BUC"
u = paste0(
  "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/",
  layer,
  "/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson"
)
lads = sf::read_sf(u)
sf::write_sf(lads, "lads.geojson", delete_dsn = TRUE)
plot(lads$geometry)
```

The first 10 rows are as follows:

```{r}
#| eval: false
lads |>
  slice(1:10)
#   # A tibble: 10 × 12
#      FID LAD23CD   LAD23NM       LAD23NMW  BNG_E  BNG_N   LONG   LAT Shape__Area
#    <int> <chr>     <chr>         <chr>     <int>  <int>  <dbl> <dbl>       <dbl>
#  1     1 E06000001 Hartlepool    " "      447160 531474 -1.27   54.7   96607269.
#  2     2 E06000002 Middlesbrough " "      451141 516887 -1.21   54.5   55230926.
#  3     3 E06000003 Redcar and C… " "      464361 519597 -1.01   54.6  248289167.
#  4     4 E06000004 Stockton-on-… " "      444940 518183 -1.31   54.6  205216887.
#  5     5 E06000005 Darlington    " "      428029 515648 -1.57   54.5  198811930.
#  6     6 E06000006 Halton        " "      354246 382146 -2.69   53.3   80374511.
#  7     7 E06000007 Warrington    " "      362744 388456 -2.56   53.4  178559431.
#  8     8 E06000008 Blackburn wi… " "      369490 422806 -2.46   53.7  139386374.
#  9     9 E06000009 Blackpool     " "      332819 436635 -3.02   53.8   33560284.
# 10    10 E06000010 Kingston upo… " "      511894 431650 -0.304  53.8   70875062. 
```

We can convert these into country boundaries based on the first letter of the code.

```{r lads_country}
lads_country = lads |>
  mutate(
    country = case_when(
      str_detect(LAD23CD, "^E") ~ "England",
      str_detect(LAD23CD, "^W") ~ "Wales",
      str_detect(LAD23CD, "^S") ~ "Scotland",
      str_detect(LAD23CD, "^N") ~ "Northern Ireland",
      TRUE ~ NA_character_
    )
  ) |>
  filter(!is.na(country))
nrow(lads_country) == nrow(lads)
# Outlines for each country:
countries = lads_country |>
  group_by(country) |>
  summarise()
plot(lads_country["country"])
sf::write_sf(countries, "countries.geojson", delete_dsn = TRUE)
lads_england = lads_country |>
  filter(country == "England")
```

Let's check if the local authorities in the lookup table are the same as those in the boundary file.

```{r lads_lookup}
#| eval: true
#| echo: true
# Aim: run once code to replace the lookup
lad_lookup = read_csv("lad_lookup.csv")
```

The results presented above show that LADs have changed substantially over time.
We will manually update the lookup table to reflect the current LADs.

```{r lads_lookup_update}
#| eval: false
#| echo: false
# Aim: run once code to replace the lookup
summary(lad_lookup$LAD22NM %in% lads_england$LAD23NM)
# Find lads not in lookup:
lads_not_in_lookup = lads_england |>
  filter(!LAD23NM %in% lad_lookup$LAD22NM) 
  
lads_not_in_lookup
# Find lookup entries not in lads:
lookup_not_in_lads = lad_lookup |>
  filter(!LAD22NM %in% lads_england$LAD23NM) |>
  select(LAD22NM)
nrow(lads_england) # 296 
nrow(lad_lookup) # 309
lad_lookup_new = lad_lookup |>
  filter(LAD22NM %in% lads_england$LAD23NM)
# add missing LADs:
lad_lookup_new = rbind(
  lad_lookup_new |>
    transmute(LAD23NM = LAD22NM, atf4_authority_name),
  lads_not_in_lookup |>
    transmute(LAD23NM, atf4_authority_name = NA) |>
    sf::st_drop_geometry()
)
tail(lad_lookup_new)
# Replace NAs in atf4_authority_name with LAD23NM:
lad_lookup_new = lad_lookup_new |>
  mutate(
    atf4_authority_name = case_when(
      is.na(atf4_authority_name) ~ LAD23NM,
      TRUE ~ atf4_authority_name
    )
  )
# Write to CSV:
write_csv(lad_lookup_new, "lad_lookup.csv")
```

We'll generate centroids for each LAD.

```{r lads_centroids}
lads_centroids = lads |>
  sf::st_point_on_surface()
# Add lon and lat columns: 
lads_coordinates = lads_centroids |>
  sf::st_coordinates() |>
  as_tibble() |>
  select(1:2)
lads_centroids = lads_centroids |>
  transmute(
    LAD23CD,
    LAD23NM,
    lon = lads_coordinates$X,
    lat = lads_coordinates$Y
  ) |>
  sf::st_drop_geometry()
# Write data frame to CSV:
write_csv(lads_centroids, "lads_centroids.csv")
# Upload
# system("gh release upload 1.3 lads_centroids.csv")
# Ignore file with usethis:
usethis::use_git_ignore("lads_centroids.csv")
```


## Transport authorities

Transport authorities are composed of one or more local authorities.

```{r, eval=FALSE, echo=FALSE}
u = "https://github.com/udsleeds/openinfra/raw/main/data-small/lad_ta_region_lookup_atf3.csv"
lad_lookup = read_csv(u)
ta_lookup = read_csv("C:/Users/RLOVELAC/atip_analysis/lookup.csv")
summary(ta_lookup$name %in% lad_lookup$Region_name)
for(i in seq(length(ta_lookup))) {
  print(summary(ta_lookup[[i]] %in% lad_lookup$Region_name))
}
ta_in_lookup = ta_lookup$name_original %in% lad_lookup$Region_name
ta_lookup[!ta_in_lookup, ] # South Yorkshire missing
lad_lookup = lad_lookup |>
  mutate(atf4_authority_name = case_when(
    str_detect(Region_name, "Sheff") ~ "South Yorkshire Combined Authority",
    TRUE ~ Region_name
      ))
summary(ta_lookup$name_original %in% lad_lookup$atf4_authority_name)
ta_lookup = ta_lookup |>
  transmute(
    atf4_authority_name = name_original,
    atf4_authority_code = code,
    internal_region_name = name,
    authority_name_alternative_1 = Authority,
    authority_name_alternative_2 = Authority_alternative,
    `LA name`
    ) |>
  arrange(atf4_authority_name)
lad_lookup = lad_lookup |>
  transmute(
    LAD23NM,
    atf4_authority_name
    )
write_csv(lad_lookup, "lad_lookup.csv")
write_csv(ta_lookup, "ta_lookup.csv")
```

The lookup table in `lad_lookup.csv` provides a lookup between LADs and transport authorities.
The table has the following contents (sample of 9 authorities shown):

```{r}
lad_lookup = read_csv("lad_lookup.csv")
lad_lookup |>
  slice(1:9) |>
  knitr::kable()
```


The lookup table was used to create a dataset representing transport authorities, as shown below.

```{r transport_authorities}
lads_joined = left_join(lads, lad_lookup)
lads_joined = lads_joined |>
  filter(!is.na(atf4_authority_name))
sf::sf_use_s2(FALSE)
transport_authorities = lads_joined |>
  group_by(atf4_authority_name) |>
  summarise(
    n_lads = n(),
    lad_names = paste(LAD23NM, collapse = ", ")
  ) |>
  arrange(atf4_authority_name)
plot(transport_authorities$geometry)
sf::write_sf(transport_authorities, "transport_authorities.geojson", delete_dsn = TRUE)
```

There are `r nrow(transport_authorities)` transport authorities including London and Isles of Scilly.
The complete list of `atf4_authority_names` is shown below.

```{r}
transport_authorities = sf::read_sf("transport_authorities.geojson")
transport_authorities |> mapview::mapview()
ta_lookup = read_csv("ta_lookup.csv")
ta_lookup$atf4_authority_name
```

```{r}
#| eval: false
#| echo: false
# Checkout North Yorkshire:
north_yorkshire_lad = lads |>
  filter(LAD23NM == "North Yorkshire") 
mapview::mapview(north_yorkshire_lad)
```

```{r}
```

The link between local authority districts (LADs) and transport authorities is shown below for West Yorkshire, for example.

```{r}
lads_joined = left_join(lads, lad_lookup)
lads_joined |>
  filter(atf4_authority_name == "West Yorkshire Combined Authority") |>
  select(LAD23NM) |>
  tm_shape() +
  tm_polygons("LAD23NM")
```

The resulting files are available in the repo's releases.

```{bash, eval=FALSE}
ls
git status
gh release create
gh release upload 1.3 *.csv
gh release upload 1.3 *.geojson
```

# In Python

Install polars:

```{bash, eval=FALSE}
pip install polars
```

```{python}
import polars as pl
# read in ta_lookup.csv
ta_lookup = pl.read_csv("ta_lookup.csv")

```